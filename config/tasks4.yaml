suggestion_generation:
  description: >
    Generate actionable suggestions for resolving each classified support ticket.
    The suggestions should be based on:
    - Issue Type: Tailor suggestions to the specific type of issue reported.
    - Historical Data: Use historical data such as resolution_time_minutes and
      satisfaction_rating to inform the suggestions.
    - Customer Feedback: Incorporate insights from customer_comments to
      customize the suggestions further.

    The goal is to provide clear, actionable steps that the support team can
    take to resolve each issue efficiently and effectively.
  expected_output: >
    A list of actionable suggestions linked to each classified support ticket,
    optimized for quick and effective resolution by the support team.

table_generation:
  description: >
    Generate tables that summarize the key metrics and trends observed in the
    support data, including:
    - Issue Classification Results: A table summarizing the frequency and
      priority levels of different issue types.
    - Agent Performance: A table showing the performance of different agents
      based on resolution times and customer satisfaction scores.
    - Customer Satisfaction: A table summarizing customer satisfaction ratings
      over time.

    These tables will serve as the foundation for generating charts in the next
    task.
  expected_output: >
    A set of tables summarizing the key metrics and trends observed in the
    support data, ready to be used for chart generation.

chart_generation:
  description: >
    Generate professional-quality charts using Python visualization libraries
    (matplotlib, seaborn, or plotly) based on the provided data. Create:
    
    1. Issue Distribution: Bar chart showing issue type distribution
    2. Priority Levels: Bar chart showing priority distribution
    
    Sample code structure:
    ```python
    # For Issue Distribution
    issue_data = {
        'Issue Type': ['API Issue', 'Login Issue', 'Report Generation', 
                      'Data Import', 'Feature Request', 'Billing Issue', 'UI Bug'],
        'Frequency': [8, 8, 6, 12, 9, 11, 6]
    }
    
    # For Priority Levels
    priority_data = {
        'Priority Level': ['High', 'Medium', 'Critical', 'Low'],
        'Count': [24, 15, 8, 13]  # Pre-calculated totals
    }
    ```
    
    Requirements:
    - Use simple bar charts for clear visualization
    - Include proper titles, labels, and legends
    - Use appropriate color schemes
    - Save charts as PNG files
    - Ensure consistent sizing and formatting
  expected_output: >
    A set of professionally formatted charts saved as PNG files, with clear
    visualization of issue distribution and priority levels.

final_report_assembly:
  description: >
    Assemble the final report by integrating the tables and charts generated in
    the previous tasks. The report should include:
    - Issue Classification Results: Overview of the types of issues reported,
      their frequency, and priority levels, presented in tables and charts.
    - Agent Performance: Insights into the performance of support agents, based
      on metrics like resolution time and customer satisfaction, presented in
      tables and charts.
    - Customer Satisfaction: A summary of the customer satisfaction ratings and
      their trends over time, presented in tables and charts.
    - Suggested Actions: A summary of the actionable suggestions generated for
      each category of issue.

    The report should have tables and relevant charts side by side with an
    appropriate size.

    The report should be formatted for easy consumption by stakeholders,
    providing valuable insights into the performance of the support system and
    areas for improvement.
  expected_output: >
    A comprehensive final report that integrates tables, charts, and actionable
    insights into a single document, formatted for stakeholders.
    Don't add '```' or '```markdown' to the report.
